<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hurshi Blog</title>
    <description>这里是 Hurshi 的个人博客，与你一起发现更大的世界。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 05 Mar 2019 17:50:28 +0800</pubDate>
    <lastBuildDate>Tue, 05 Mar 2019 17:50:28 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>Ubuntu</title>
        <description>&lt;h4 id=&quot;定时任务-crontab&quot;&gt;定时任务 Crontab&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;打开：&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo crontab -e&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用规则&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;m&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;h&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;dom&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;mon&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;dow&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;command&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;分钟&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;小时&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;日&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;月&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;星期(0~6,0表示周日)&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;命令&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;6,11,17,22&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;*/5&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;sh autosend.sh&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;符号&lt;/th&gt;
          &lt;th&gt;意义&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;*&lt;/td&gt;
          &lt;td&gt;代表所有的取值范围内的数字；&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;/&lt;/td&gt;
          &lt;td&gt;代表”每”（“*/5”，表示每5个单位）&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;代表从某个数字到某个数字（“1-4”，表示1-4个单位）&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;,&lt;/td&gt;
          &lt;td&gt;分开几个离散的数字；&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;ubuntu-1804-启动服务开机自启&quot;&gt;Ubuntu 18.04 启动服务/开机自启&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;参考：&lt;a href=&quot;https://linoxide.com/linux-how-to/enable-disable-services-ubuntu-systemd-upstart/&quot;&gt;How to Enable or Disable Services in Ubuntu Systemd/Upstart&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;描述&lt;/th&gt;
          &lt;th&gt;命令&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;启动/关闭/重启 服务&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start/stop/restart service-name&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;查看状态&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl status service-name&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;开机启动&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable service-name&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;取消开机启动&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl disable service-name&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;开机启动状态&lt;/td&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl is-enabled service-name&lt;/code&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;不可描述&quot;&gt;不可描述&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hwdsl2/setup-ipsec-vpn&quot;&gt;n_p_v&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-libev&quot;&gt;s_s_s&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/ubuntu/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/ubuntu/</guid>
        
        <category>操作系统</category>
        
        <category>shell</category>
        
        
      </item>
    
      <item>
        <title>趣解三次握手</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/24853633&quot;&gt;转自知乎 – TCP 为什么是三次握手，而不是两次或四次？&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;三次握手&quot;&gt;三次握手&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A: 喂,你听得见么?&lt;/li&gt;
  &lt;li&gt;B: 我听得见呀,你听得到我么?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A: 我能听到你&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;旁白: 于是,他们愉快地聊了起来&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;四次挥手&quot;&gt;四次挥手&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A: 我要挂电话了哈,你还有什么事情么?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;B: 哦,稍等会,你刚说的我还没搞清楚.&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;旁白: 过了一会&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;B: 我搞清楚了,那挂了吧,你有其他事情么?&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A: 没了,挂吧&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;旁白: 于是B就挂了电话,A等了一会没有听到B讲话,也挂了电话.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;questions&quot;&gt;Questions&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;为什么非得三次握手,不能2次么?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;A: 喂,你听得见么?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;B: 我听得见呀,你听得到我么?&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;blockquote&gt;
          &lt;p&gt;旁白: B并不能知道A能不能听见呀&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;来自&lt;a href=&quot;https://www.jianshu.com/p/271b1c57bb0b&quot;&gt;@zskingking的解释&lt;/a&gt;: 第三次握手是为了避免服务端造成资源的浪费&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;假如TCP是两次握手：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;主机A向主机B发送了一个建立连接的请求x，但这个请求在半路里给堵了。&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;主机A没有得到主机B的响应于是又发了一个建立连接的请求y，主机B收到了请求y，于是给主机A发送了一个确认，此时连接建立。&lt;/li&gt;
    &lt;li&gt;数据传输完毕后断开了连接。&lt;/li&gt;
    &lt;li&gt;但在断开连接后堵在半路的请求x到达了主机B，此时主机B认为主机A又给自己发送了一个建立连接的请求，于是给主机A发送了一个确认，此时主机B认为连接已经建立，处于等待状态从而导致主机B资源的浪费。&lt;/li&gt;
    &lt;li&gt;但如果是三次握手就可以避免这种情况的出现，所以这才是TCP第三次握手的原因。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/three_way_handshake/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/three_way_handshake/</guid>
        
        <category>http</category>
        
        
      </item>
    
      <item>
        <title>Shell 技巧</title>
        <description>&lt;p&gt;| 命令  | 描述  | 备注  |
| — | — | — |
| 官网 | &lt;a href=&quot;https://wiki.ubuntu.com.cn/%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8C%87%E5%8D%97&quot;&gt;Ubuntu 官方命令行指南&lt;/a&gt; |  |
| &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; + 鼠标左键  | 光标快速定位  |  |
| &lt;code class=&quot;highlighter-rouge&quot;&gt;Find&lt;/code&gt;  | ` find [path][options][expression]&lt;code class=&quot;highlighter-rouge&quot;&gt;  |    &lt;/code&gt;find . -name ‘*.txt’&lt;code class=&quot;highlighter-rouge&quot;&gt; |
| &lt;/code&gt;kill pid&lt;code class=&quot;highlighter-rouge&quot;&gt;  | 杀掉进程 | &lt;/code&gt;kill -9 pid:&lt;code class=&quot;highlighter-rouge&quot;&gt;强制杀掉进程&amp;lt;br/&amp;gt;&lt;/code&gt;killall name:&lt;code class=&quot;highlighter-rouge&quot;&gt;杀掉所有name的进程 |
| &lt;/code&gt;netstat&lt;code class=&quot;highlighter-rouge&quot;&gt;  | 查看网络状况 | &lt;/code&gt;netstat -a:&lt;code class=&quot;highlighter-rouge&quot;&gt;查看已经链接的服务端口&amp;lt;br/&amp;gt;&lt;/code&gt;netstat -ap:&lt;code class=&quot;highlighter-rouge&quot;&gt;查看所有的服务端口 |
| &lt;/code&gt;cat /etc/issue&lt;code class=&quot;highlighter-rouge&quot;&gt;  | 查看&lt;/code&gt;Ubuntu&lt;code class=&quot;highlighter-rouge&quot;&gt;版本  | &lt;/code&gt;lsb_release -a:&lt;code class=&quot;highlighter-rouge&quot;&gt;查看更加详细的内容 |
| &lt;/code&gt;scp -r local_dir username@servername:remote_dir&lt;code class=&quot;highlighter-rouge&quot;&gt; | 上传本地目录到服务器  |  |
|&lt;/code&gt;scp -r username@servername:remote_dir local_dir&lt;code class=&quot;highlighter-rouge&quot;&gt;|下载服务器目录到本地||
| &lt;/code&gt;ps -aux&lt;code class=&quot;highlighter-rouge&quot;&gt;  | 进程监控 | &lt;/code&gt;-a:&lt;code class=&quot;highlighter-rouge&quot;&gt;显示所有用户的所有进程 &amp;lt;br&amp;gt; &lt;/code&gt;-u:&lt;code class=&quot;highlighter-rouge&quot;&gt;按照用户名和启动事件顺序显示进程&amp;lt;br&amp;gt;&lt;/code&gt;-x:&lt;code class=&quot;highlighter-rouge&quot;&gt;显示无控制终端的进程&amp;lt;br&amp;gt;&lt;/code&gt;-l:&lt;code class=&quot;highlighter-rouge&quot;&gt;长格式输入&amp;lt;br&amp;gt;&lt;/code&gt;-ww:&lt;code class=&quot;highlighter-rouge&quot;&gt;避免详细参数被截断&amp;lt;br&amp;gt;&lt;/code&gt;-r:&lt;code class=&quot;highlighter-rouge&quot;&gt;显示运行中的进程&amp;lt;br&amp;gt;&lt;/code&gt;-f:&lt;code class=&quot;highlighter-rouge&quot;&gt;用树形格式来显示进程&amp;lt;br&amp;gt;&lt;/code&gt;-j:&lt;code class=&quot;highlighter-rouge&quot;&gt;用任务格式来显示进程 |
|&lt;/code&gt;&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;|将输出内容保存到其他|eg  &lt;/code&gt;curl baidu.com &amp;gt; 123.txt`|&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/shell_skills/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/shell_skills/</guid>
        
        <category>Shell</category>
        
        
      </item>
    
      <item>
        <title>讲真，搜索正确的打开姿势</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;逻辑与或非操作&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;OR&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;文字通配&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; ：匹配任意字符。比如”Android *“可以搜索到 Android studio / Android UI等&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.. &lt;/code&gt;(2个点 + 1个空格)：区间通配。比如搜索2012-2016年就可以“2012.. 2016年”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;搜索语法&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;site&lt;/strong&gt;: 指定搜索内容的网站&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;:&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;filetype:&lt;/strong&gt; 指定要搜索的文件类型，比如 harry potter filetype:pdf&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;想知道更多？ Google:  &lt;code class=&quot;highlighter-rouge&quot;&gt;google search tips&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;参考&quot;&gt;参考：&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;《Android群英传 - 神兵利器》&lt;/li&gt;
  &lt;li&gt;Google&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/search/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/search/</guid>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>PPT 搞起来</title>
        <description>&lt;ol&gt;
  &lt;li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js&quot;&gt;reveal.js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;在线编辑器：https://slides.com/  👈👈 简单点就用这个吧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/impress/impress.js&quot;&gt;impress.js&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://strut.io/&quot;&gt;Strut&lt;/a&gt;:  impress.js编辑器&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/ppt/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/ppt/</guid>
        
        <category>tools</category>
        
        
      </item>
    
      <item>
        <title>Gradle 看过来</title>
        <description>&lt;h3 id=&quot;小白指令&quot;&gt;小白指令&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;清除缓存，强制刷新依赖库：&lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew --refresh-dependencies&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;加速构建&quot;&gt;加速构建&lt;/h3&gt;

&lt;p&gt;查看Gradle性能：&lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew assembleDebug -profile&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用缓存：&lt;/p&gt;

    &lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// gradle.properties:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;caching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//build.gradle:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kapt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;useBuildCache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   	
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;增加系统资源&lt;/p&gt;

    &lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// gradle.properties:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jvmargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xmx2048m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;XX:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPermSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;XX:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HeapDumpOnOutOfMemoryError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 配置编译时的虚拟机大小&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;daemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 开启线程守护，第一次编译时开线程，之后就不会再开了&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 开启并行编译&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gradle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;configureondemand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 启用新的孵化模式&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//build.gradle:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dexOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;incremental&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//使用增量模式构建&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;javaMaxHeapSize&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;4g&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;threadCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//线程数&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Debug&lt;/strong&gt; 时跳过某些步骤&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;跳过 lint
        &lt;ol&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew assembleDebug -x lint&lt;/code&gt; ：在gradle命令后面跟上&lt;code class=&quot;highlighter-rouge&quot;&gt; -x lint&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;project.gradle.startParameter.excludedTaskNames.add('lint')&lt;/code&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;跳过 AAPT&lt;/p&gt;

        &lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;aaptOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cruncherEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;qa&quot;&gt;QA&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;u&gt;build.gradle 中的 gradle 版本号&lt;/u&gt; 和 &lt;u&gt;gradle-wrapper.properties 中的版本号&lt;/u&gt;有什么区别&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;答&lt;/strong&gt;：build.gradle中描述的是Google为Android开发的Gradle插件版本，而wrapper中描述的是由&lt;a href=&quot;https://gradle.org&quot;&gt;gradle.org&lt;/a&gt;维护的Gradle的版本。&lt;/p&gt;

    &lt;p&gt;有点类似于：有一个lib库依赖于java版本，build.gradle对应于lib版本，而wrapper对应于java版本。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/gradle/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/gradle/</guid>
        
        <category>Android</category>
        
        <category>gradle</category>
        
        
      </item>
    
      <item>
        <title>Android 微信智能心跳方案</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/posts/wechat-long-http/head.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查看微信&lt;a href=&quot;https://mp.weixin.qq.com/s/ghnmC8709DvnhieQhkLJpA&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;在13年11月中旬时，因为基础组件组人手紧张，Leo安排我和春哥去广州轮岗支援。刚到广州的时候，Ray让我和春哥对Line和WhatsApp的心跳机制进行分析。我和春哥抓包测试了差不多两个多礼拜，在我们基本上摸清了Line和WhatsApp的心跳机制后，Ray才告诉我们真正的任务——对微信的固定心跳进行优化，并告诉我们这不是一件容易的事情。于是我和春哥开始构思第一个方案，我们开始想用统计的方法来解决问题，当我们拿着第一个方案和Ray讨论时，发现不能优雅应对Ray的所有提问：1、测试环境的准确性，失败到底是因为网络的特性导致还是因为用户当前的环境变化导致的暂时失败。2、临界值界定，如果方案选中的心跳值是临界值，我们该怎么办。Ray和组件组同事在网络方面有极其丰富的经验，虽然他没有给我们指出明确的方向，但提出的问题帮助我们更快的补齐需要面对的核心问题。这两个问题让我和春哥意识到如果能很好的解决，就可以给出一个比较好的心跳方案。第一个问题我和春哥开始就意识到，第二个问题我们确实在一开始时疏忽了。但直接解决这两个问题确实不容易，这着实让我和春哥迷茫了几天，有两三天在纺园我都没怎么睡着，因为想不到更好的方法。直到有一天思路发生了一些转变，既然最优解比较复杂，为什么不绕过去，使用有损服务理念找次优解呢。让复杂的事情简单化，好了，想到这里突然有一种拨开云雾的感觉。&lt;/li&gt;
  &lt;li&gt;思路对了，方案就可以做到简单并且可靠，大家可以看到最终的方案是比较简单的，并且效果还挺好的。在方案描述之前大概讲一下减低问题复杂度的方法：
&lt;strong&gt;a）延迟心跳测试法：&lt;/strong&gt;这是测试结果准确的前提保障，我们认为长连接建立后连续三次成功的短心跳就可以很大程度的保证下一次心跳环境是正常的。
&lt;strong&gt;b）成功一次认定，失败连续累积认定&lt;/strong&gt;：成功是绝对的，连续失败多次才可能是失败。
&lt;strong&gt;c）临界值避免：&lt;/strong&gt;我们使用比计算出的心跳稍微小一点的值做为稳定心跳避免临界值。
&lt;strong&gt;d）动态调整：&lt;/strong&gt;即使在一次完整的智能心跳计算过程中，我们没有找到最好的值，我们还有机会来进行校正。&lt;/li&gt;
  &lt;li&gt;当我和春哥想出第二个简单易行的方案后，我们心里就很有底了，去找Ray讨论，Ray听完后一次通过，然后Ray约了Harvey，给Harvey讲完后，Harvey说听起来可以，可以试试。&lt;/li&gt;
  &lt;li&gt;然后就开始动手，分析竞品加确定方案花了差不多两个月。写心跳的主要代码，只花了一天时间，我记得那天是年会后的一天。回过头来再看这个方案花费的时间还是值得的，后来灰度的统计数据显示，70%用户都可以达到我们的心跳上限。
搞完智能心跳后一段时间在广州没事干，我就跟Ray商量，Ray让我去测试下WebView的性能瓶颈。然后我跟周斯基一起来做这件事，搞完了安卓客户端WebView性能瓶颈测试后，因为怀孕的老婆一个人在深圳，领导就安排我先回深圳了。春哥坚守着把GCM部分完成后才回深圳。&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;等我们的心跳版本正式发布后一年前我在公司km上分享了智能心跳方案吸引不少做push的同事加入了讨论感觉这方面的交流还是很有必要的&quot;&gt;等我们的心跳版本正式发布后，一年前我在公司km上分享了智能心跳方案，吸引不少做push的同事加入了讨论，感觉这方面的交流还是很有必要的。&lt;/h2&gt;
    &lt;p&gt;好了，废话了很多，下面分享一下微信的智能心跳方案细节。&lt;/p&gt;
    &lt;h4 id=&quot;主要目标&quot;&gt;主要目标&lt;/h4&gt;
    &lt;p&gt;本方案的主要目标是，在尽量不影响用户收消息及时性的前提下，根据网络类型自适应的找出保活信令TCP连接的尽可能大的心跳间隔，从而达到减少安卓微信因心跳引起的空中信道资源消耗，减少心跳Server的负载，以及减少部分因心跳引起的耗电。
主要方法是参考WhatsApp和Line中有价值的做法，结合影响TCP连接寿命的因素，实现Android微信后台自适应心跳算法，同时使用GCM作为辅助通道增加新消息通知的可靠性。&lt;/p&gt;
    &lt;h5 id=&quot;whatsappline微信的push策略分析&quot;&gt;WhatsApp、Line、微信的Push策略分析&lt;/h5&gt;
    &lt;ol&gt;
      &lt;li&gt;WhatsApp
在不支持GCM的设备上，采用和微信类似的长连接+心跳策略，WIFI和手机网络下的心跳间隔都为4分45秒，心跳5次后，主动断开连接再重连。
在支持GCM的设备上，主要靠GCM来激活WhatsApp，WhatsApp启动后，会建立一个与服务器的长连接，直接通过此长连接发送Push消息，这个长连接10分钟无消息就会主动断掉，且这十分钟内不做心跳，断掉后WhatsApp客户端和它的服务器不再有连接。当有消息时候，服务器发现没有长连接会发送GCM消息，手机收到GCM消息后，会重新建立长连接来收取消息，10分钟无消息会再断开，如此循环。&lt;/li&gt;
      &lt;li&gt;Line
从测试中发现Line在国内、台湾、美国使用了不同的策略。&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;美国（使用GCM）：&lt;/em&gt;
启动时，会保持7分钟心跳（CDMA2000网络）维持长连接半小时，之后主动断开长连接。当有消息时，服务器会发送GCM消息，Line客户端接收到GCM消息后，重新建立长连接，并再次用心跳维持半个小时。&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;em&gt;国内（不使用GCM）：&lt;/em&gt;
在国内，同样帐号在相同网络，不同的手机上测出了两种策略：
        &lt;ol&gt;
          &lt;li&gt;长连接+心跳策略*（在Galaxy S3上使用），心跳间隔WIFI下是3分20秒，手机网络是7分钟。&lt;/li&gt;
          &lt;li&gt;轮询策略（在红米和Nexus S上使用），如图2-1所示。与心跳策略的主要区别用红色标出，客户端在长连接建立后也会定时发送请求，Server会回复并且同时关闭长连接。客户端等待轮询间隔T1后再次建立TCP连接。Line会根据手机的活跃状态动态调整T1，调整范围是从最小1分到 最大到2小时半。而长连接存活时间T2比较固定，在WIFI下4分钟，手机网络7分钟。如果在T2时收到新消息会延长T2的时间。
&lt;img src=&quot;/img/posts/wechat-long-http/lunxun.jpg&quot; alt=&quot;&quot; /&gt;
图2-1 Line在国内的轮询策略
            &lt;ol&gt;
              &lt;li&gt;&lt;em&gt;台湾（不使用GCM）：&lt;/em&gt;
从IBG同事win和guang提供的测试数据中看到，台湾使用的策略跟国内的轮询策略类似。&lt;/li&gt;
              &lt;li&gt; &lt;em&gt;微信&lt;/em&gt;
微信没有使用GCM，自己维护TCP长连接，使用固定心跳。&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;心跳典型值&quot;&gt;心跳典型值&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;WhatsApp&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Line&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;GCM&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WIFI&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4分45秒&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3分20秒&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15分钟&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;手机网络&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4分45秒&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7分钟&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;28分钟&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;linewhatsapp微信push策略的优点&quot;&gt;Line、WhatsApp、微信Push策略的优点&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;微信：当前心跳间隔比竞品短，所以微信在新消息提醒上会最及时。&lt;/li&gt;
  &lt;li&gt;使用GCM：Line和WhatsApp使用GCM策略的最大优点就是省电，以及减轻系统负荷（减少后台应用数目）。&lt;/li&gt;
  &lt;li&gt;Line：Line的轮询策略，优点是当Line处于活跃状态时，及时收消息。当Line处于不活跃状态时，省电。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;linewhatsapp微信push策略的不足&quot;&gt;Line、WhatsApp微信Push策略的不足&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;微信当前心跳频率相对竞品较大，在耗电、耗流量，占用信令通道等方面有所影响。&lt;/li&gt;
  &lt;li&gt;Line的轮询策略，导致的问题是消息可能会延迟接收，测试发现最大延迟间隔到2.5小时。&lt;/li&gt;
  &lt;li&gt;WhatsApp和Line使用Push拉起一个定时长连接策略，缺点是要依赖Google的Push服务，如果Google的Push服务不稳定，消息也会延迟接收。&lt;/li&gt;
  &lt;li&gt;在国内的移动和联通2G网络下，由于运营商的策略，GCM长连接频繁断连，WhatsApp的Push消息很不及时，体验非常差。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;gcm研究&quot;&gt;GCM研究&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;GCM特点
    &lt;ul&gt;
      &lt;li&gt;Android2.2以下的手机不支持GCM，2.2到3.0需要安装Google Store并设置Google帐号，4.04及以上版本不需要设置帐号也能支持。&lt;/li&gt;
      &lt;li&gt;GCM只传递数据（可以传递小于4kb的数据），对这些数据的处理可以全部由开发者控制。&lt;/li&gt;
      &lt;li&gt;Android应用不需要运行就可以接收消息(通过Android广播)。&lt;/li&gt;
      &lt;li&gt;GCM不保证发送的消息的顺序，也不保证消息一定能够推送到手机。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GCM心跳策略以及存在的问题
    &lt;ul&gt;
      &lt;li&gt;用心跳保活长连接，心跳间隔为WIFI下15分钟，数据网络下28分钟。&lt;/li&gt;
      &lt;li&gt;Google可以改变所有Android设备的心跳间隔值（目前还未改变过）。&lt;/li&gt;
      &lt;li&gt;GCM由于心跳间隔固定，并且较长，所以在NAT aging-time设置较小的网络（如联通2G，或有些WIFI环境下）会导致TCP长连接在下一次心跳前被网关释放。造成Push延迟接收。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GCM的可用性及稳定性
目前测试发现GCM在国内可用性不高，原因有：
    &lt;ul&gt;
      &lt;li&gt;Android很多被手机厂商定制化，厂商可能会去掉GCM服务。&lt;/li&gt;
      &lt;li&gt;Android2.2到3.0之间需要安装Google Store并设置Google帐号。&lt;/li&gt;
      &lt;li&gt;由于国内2G和移动3G的NAT超时时间都小于GCM心跳时间(28分钟)，TCP长连接必然无法保活，每次都要等28分钟心跳失败重连后才能收到Push。&lt;/li&gt;
      &lt;li&gt;某些运营商可能限制了5228端口，移动3G/2G下，发现几乎无法连接上GCM服务器，也就无法获得GCM通知，WhatsApp放后台10分钟后，经常很长时间都收不到Push消息。
在美国3G网络下抓包的24小时，GCM的连接极其稳定，24小时内GCM长连接未曾断过，在台湾3G网络下抓包14个小时，GCM连接也只断过一次。WhatsApp用户在此类地区网络下客户端可以获得很及时的Push通知。
在中国电信3G下抓包，大部分时间GCM连接都比较稳定，只会因为偶尔的DHCP造成断连现象，由于频率很低(平均数小时才发生一次)，对Push体验的影响不大。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GCM Server类型
GCM提供两种Server模型：
    &lt;ul&gt;
      &lt;li&gt;HTTP Server : 使用同步接口发送HTTP请求，一次请求可以发给最多1000个设备。&lt;/li&gt;
      &lt;li&gt;XMPP Server :使用异步接口发送请求，只支持对单个设备（或同一个用户的多个关联设备发送），发送请求并发数须小于1000，支持设备到云端Server发送数据。需要Google将我们的发送Server加入白名单。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;微信可能的改进点探讨&quot;&gt;微信可能的改进点探讨&lt;/h5&gt;
&lt;p&gt;微信Push的优化主要有几个优化点：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;公共Push通道&lt;/li&gt;
  &lt;li&gt;使用GCM Push作为辅助通道&lt;/li&gt;
  &lt;li&gt;自适应心跳间隔优化
    &lt;ol&gt;
      &lt;li&gt;公共Push通道
由于GCM在国内的可靠性很低，现在国内Android上的Push基本上是各自为政，很多软件都自己实现Push。导致手机被经常性的唤醒，耗电耗流量严重。
市面上已经有很多第三方的公共推送服务，大家可以选择一个适合自己应用的推送服务。腾讯也有信鸽和维纳斯组件，大家在选择方案的时候可以对比下。
最终因为我们国内外使用一套方案，并且是辅助公道，所以我们选择使用GCM。&lt;/li&gt;
      &lt;li&gt;使用GCM Push作为辅助通道
  ​     *  当前使用GCM的成本不大，可以使用GCM作为辅助通道来增加新消息的及时性。
  ​     *  使用GCM作为辅助通道，在支持GCM的设备上微信上传自己的注册GCM ID给微信Server。
  ​     *  微信Server在发现长连接失效的情况下，可以使用GCM 作为辅助通道通知客户端有新消息，客户端收到push通知后做一次sync。
  ​     *  只利用GCM来激活微信，不传递消息的具体数据，要控制给同一设备发送GCM通知的时间间隔(如五分钟)。&lt;/li&gt;
      &lt;li&gt;自适应心跳间隔优化&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ol&gt;
      &lt;li&gt;影响TCP连接寿命的因素
在Android下，不管是GCM，还是微信，都是通过TCP长连接来进行Push消息的，TCP长连接存活，消息Push就及时，所以要对影响TCP连接寿命的因素进行研究。
        &lt;ul&gt;
          &lt;li&gt;NAT超时
大部分移动无线网络运营商都在链路一段时间没有数据通讯时，会淘汰 NAT 表中的对应项，造成链路中断（&lt;em&gt;NAT**超时的更多描述见附录6.1&lt;/em&gt;）。NAT超时是影响TCP连接寿命的一个重要因素(尤其是国内)，所以客户端自动测算NAT超时时间，来动态调整心跳间隔，是一个重要的优化点。&lt;/li&gt;
          &lt;li&gt;DHCP的租期（lease time）
目前测试发现安卓系统对DHCP的处理有Bug，DHCP租期到了不会主动续约并且会继续使用过期IP，这个问题会造成TCP长连接偶然的断连。（&lt;em&gt;租期问题的具体描述见附录**6.2&lt;/em&gt;）。&lt;/li&gt;
          &lt;li&gt;网络状态变化
手机网络和WIFI网络切换、网络断开和连上等情况有网络状态的变化，也会使长连接变为无效连接，需要监听响应的网络状态变化事件，重新建立Push长连接。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;心跳范围选择
        &lt;ul&gt;
          &lt;li&gt;前后台区分处理：
为了保证微信收消息及时性的体验，当微信处于前台活跃状态时，使用固定心跳。
微信进入后台（或者前台关屏）时，先用几次最小心跳维持长链接。然后进入后台自适应心跳计算。这样做的目的是尽量选择用户不活跃的时间段，来减少心跳计算可能产生的消息不及时收取影响。&lt;/li&gt;
          &lt;li&gt;后台自适应心跳选择区间：
可根据自身产品的特点选择合适的心跳范围。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;状态转换图
&lt;img src=&quot;/img/posts/wechat-long-http/zhuangtai.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;自适应心跳算法描述
        &lt;ul&gt;
          &lt;li&gt;按网络类型区分计算：
因为每个网络的NAT时间可能不一致。所以需要区分计算，数据网络按subType做关键字，WIFI按WIFI名做关键字。
对稳定的网络，因为NAT老化时间的存在，在自适应计算态的时候，暂设计以下步骤在当前心跳区间逼近出最大可用的心跳。&lt;/li&gt;
          &lt;li&gt;变量说明：
[MinHeart，MaxHeart]——心跳可选区间。
successHeart——当前成功心跳，初始为MinHeart
curHeart——当前心跳初始值为successHeart
heartStep——心跳增加步长
successStep——稳定期后的探测步长&lt;/li&gt;
          &lt;li&gt;最大值探测步骤：
&lt;img src=&quot;/img/posts/wechat-long-http/xintiao.jpg&quot; alt=&quot;&quot; /&gt;
图4-1 自适应心跳计算流程
自适应心跳计算流程如图4-1所示，经过该流程，会找到必然使心跳失败的curHeart（或者MaxHeart），为了保险起见，我们选择比前一个成功值稍微小一点的值作为后台稳定期的心跳间隔。
影响手机网络测试的因素太多，为了尽量保证测试结果的可靠性，我们使用延迟心跳测试法。在我们重新建立TCP连接后，先使用 短心跳连续成功三次，我们才认为网络相对稳定，可以使用curHeart进行一次心跳测试。图4-2显示了一次有效心跳测试过程。图4-3显示了在没有达到稳定网络环境时，我们会一直使用固定短心跳直到满足三次连续短心跳成功。
使用延迟心跳测试的好处是，可以剔除偶然失败，和网络变化较大的情况（如地铁），使测试结果相对可靠（五次延迟测试确定结论）。同时在网络波动较大的情况，使用短心跳，保证收取消息相对及时。&lt;/li&gt;
          &lt;li&gt;运行时的动态调整策略(已经按测算心跳稳定值后)
NAT超时值算出来后，在维持心跳的过程中的策略&lt;/li&gt;
          &lt;li&gt;无网络、网络时好时坏、偶然失败、NAT超时变小：在后台稳定期发生心跳发生失败后，我们使用延迟心跳测试法测试五次。如果有一次成功，则保持当前心跳值不变；如果五次测试全失败，重新计算合理心跳值。该过程如图4-4所示，有一点需要注意，每个新建的长连接需要先用短心跳成功维持3次后才用successHeart进行心跳。
&lt;img src=&quot;/img/posts/wechat-long-http/xintiao2.jpg&quot; alt=&quot;&quot; /&gt;
图4-2 后台稳定态动态调整心跳策略&lt;/li&gt;
          &lt;li&gt;NAT超时变大：以周为周期，每周三将后台稳定态调至自适应计算态，使用心跳延迟法往后探测心跳间隔。&lt;/li&gt;
          &lt;li&gt;successHeart是NAT超时临界值：因为我们现在选择的是一个比successHeart稍小的值作为稳定值，所以在计算过程中可以避开临界值。当运营商在我们后台稳定期将NAT超时调整为我们当前计算值，那么由于我们每周会去向下探索，所以下一周探测时也可以及时调整正确。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;冗余Sync和心跳
在用户的一些主动操作以及联网状态改变时，增加冗余Sync和心跳，确保及时收到消息。
        &lt;ul&gt;
          &lt;li&gt;当用户点亮屏幕的时候，做一次心跳。&lt;/li&gt;
          &lt;li&gt;当微信切换到前台时，做一次Sync。&lt;/li&gt;
          &lt;li&gt;联网时重建信令TCP，做一次Sync&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;可能存在的风险及预防措施&quot;&gt;可能存在的风险及预防措施&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;DHCP租期因素
    &lt;ul&gt;
      &lt;li&gt;问题：根据目前的测试结果显示，安卓不续约到期的IP Bug，会导致TCP连接在不确定的时间点失效，从而会导致一次心跳失败。&lt;/li&gt;
      &lt;li&gt;预防：统计后台稳定期的心跳成功率，上报给后台。后台可以按地区分网络监控这个指标的波动，并且后台可以根据不同的波动，动态调整某区域特定网络下可选的心跳区间。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;其他影响TCP寿命的因素
    &lt;ul&gt;
      &lt;li&gt;是否有遗漏的因素？欢迎各位联系我反馈。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;附录&quot;&gt;附录&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;附录A——NAT超时介绍
    &lt;ul&gt;
      &lt;li&gt;因为 IP v4 的 IP 量有限，运营商分配给手机终端的 IP 是运营商内网的 IP，手机要连接Internet，就需要通过运营商的网关做一个网络地址转换(Network Address Translation，NAT)。简单的说运营商的网关需要维护一个外网 IP、端口到内网 IP、端口的对应关系，以确保内网的手机可以跟 Internet 的服务器通讯。
&lt;img src=&quot;/img/posts/wechat-long-http/ggsn.jpg&quot; alt=&quot;&quot; /&gt;
NAT 功能由图中的 GGSN 模块实现&lt;/li&gt;
      &lt;li&gt;大部分移动无线网络运营商都在链路一段时间没有数据通讯时，会淘汰 NAT 表中的对应项，造成链路中断。下表列出一些已测试过的网络的NAT超时时间(更多数据由于测试条件所限没有测到)：&lt;/li&gt;
    &lt;/ul&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;地区/网络&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;NAT超时时间&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;中国移动3G和2G&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5分钟&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;中国联通2G&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5分钟&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;中国电信3G&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;大于28分钟&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;美国3G&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;大于28分钟&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;台湾3G&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;大于28分钟&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;长连接心跳间隔必须要小于NAT超时时间(aging-time)，如果超过aging-time不做心跳，TCP长连接链路就会中断，Server就无法发送Push给手机，只能等到客户端下次心跳失败后，重建连接才能取到消息。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;附录B——安卓DHCP的租期（lease time）问题
目前测试发现安卓系统对DHCP的处理有Bug：
    &lt;ul&gt;
      &lt;li&gt;DHCP租期到了不会主动续约并且会继续使用过期IP，详细描述见&lt;a href=&quot;http://www.net.princeton.edu/android/android-stops-renewing-lease-keeps-using-IP-address-11236.html&quot;&gt;传送门&lt;/a&gt;。这个问题导致的问题表象是，在超过租期的某个时间点（没有规律）会导致IP过期，老的TCP连接不能正常收发数据。并且系统没有网络变化事件，只有等应用判断主动建立新的TCP连接才引起安卓设备重新向DHCP Server申请IP租用。&lt;/li&gt;
      &lt;li&gt;未到租期的一半时间，安卓设备重新向DHCP Server申请IP租用。从目前测试结果来看，这种现象恢复的比较快。&lt;/li&gt;
      &lt;li&gt;移动2G/3G，联通2G没有抓到DHCP。&lt;/li&gt;
      &lt;li&gt;美国3G下抓取24小时，没有抓到DHCP。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/WechatLongHttp/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/WechatLongHttp/</guid>
        
        <category>Android</category>
        
        <category>http</category>
        
        
      </item>
    
      <item>
        <title>单例</title>
        <description>&lt;p&gt;原文：&lt;a href=&quot;https://mp.weixin.qq.com/s/2UYXNzgTCEZdEfuGIbcczA&quot;&gt;@程序员小灰&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;单例模式第一版&quot;&gt;单例模式第一版&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//私有构造函数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//单例对象&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//静态工厂方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;单例模式第二版&quot;&gt;单例模式第二版&lt;/h3&gt;
&lt;p&gt;在第一版的基础上加上双重加锁检测，防止并发时候创建多个对象&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//私有构造函数&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//单例对象&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//静态工厂方法&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//双重检测机制&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//同步锁&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//双重检测机制&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;单例模式第三版&quot;&gt;单例模式第三版&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volatile :&lt;/code&gt;防止指令重排&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//私有构造函数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//单例对象&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//静态工厂方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//双重检测机制&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//同步锁&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//双重检测机制&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
             &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;单例模式第四版推荐使用&quot;&gt;单例模式第四版（推荐使用）&lt;/h3&gt;
&lt;p&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;ClassLoader&lt;/code&gt;的加载机制来实现懒加载，并保证构建的单例线程安全。&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LazyHolder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(){}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Singleton&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LazyHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;其他&quot;&gt;其他&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIwMzYwMTk1NA%3D%3D&amp;amp;mid=2247489158&amp;amp;idx=1&amp;amp;sn=9a72afd00f16607ed673b9750278cdad&quot;&gt;详细的双语言(&lt;code class=&quot;highlighter-rouge&quot;&gt;Java&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Kotlin&lt;/code&gt;)5种单例模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/SingleInstance/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/SingleInstance/</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>屏幕适配 dp, px, dpi ...</title>
        <description>&lt;h3 id=&quot;概念理理清&quot;&gt;概念理理清:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;px&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;全称：pixel / 像素&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dot&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;全称：墨点（物理点）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ppi&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;全称：pixle per inch （图像分辨率）&lt;/li&gt;
      &lt;li&gt;解释：每英寸包含像素(px)的个数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dpi&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;全称：dots per inch（打印分辨率）&lt;/li&gt;
      &lt;li&gt;解释：每英寸包含物理点(dot)的个数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dppx&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;全称：dot per pixel&lt;/li&gt;
      &lt;li&gt;解释：每像素包含的像素(px)个数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;density independence&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;全称：独立密度&lt;/li&gt;
      &lt;li&gt;解释：这是Android中定义的一个值，计算方式为：屏幕像素宽度(px)/最小宽度(dp)，其中“最小宽度”可以在手机的开发者选项中设置。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;dp&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;全称：density-independent pixel (设备独立像素)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;解释：在Android中使用的单位，计算方式为：px = dp * density_indenpendence；&lt;/p&gt;

        &lt;p&gt;由此可见,其实dp类似于分辨率(ppi)，都是描述每个单位中包含多少个像素的，只不过ppi是固定的，而dp依据设备动态变化的。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;混淆区分开&quot;&gt;混淆区分开&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;DPI - PPI 都是啥鬼
    &lt;ol&gt;
      &lt;li&gt;DPI面向的是印刷受体，PPI面向的是荧屏&lt;/li&gt;
      &lt;li&gt;这篇文章讲的非常好，强烈推荐：&lt;a href=&quot;https://www.jianshu.com/p/aaa9fafdbc20&quot;&gt;十分钟快速理解DPI和PPI，不再傻傻分不清！&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;在Android中，不必过多计较DPI/PPI,毕竟官网也没有描述清楚，如下所示，既然是&lt;code class=&quot;highlighter-rouge&quot;&gt;pixels per inch&lt;/code&gt;那不应该是PPI么？
        &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;cm&quot;&gt;/**
    * The exact physical pixels per inch of the screen in the X dimension.
    */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xdpi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;图片放哪个目录&quot;&gt;图片放哪个目录？&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Android官方&lt;strong&gt;并没有说&lt;/strong&gt; “320 * 480分辨率的图片要放到mdpi中”这样的话，而是说 “160dpi 的图片要放到mdpi的文件夹中”，见&lt;a href=&quot;https://developer.android.com/training/multiscreen/screendensities&quot;&gt;官网文档&lt;/a&gt;。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是视觉一般只提供分辨率，不提供给我门dpi,我要怎么放呢？那就需要视觉提供视觉稿的英寸数值inch，然后自己计算dpi，具体计算方法如下，计算结果往上匹配（比如算出来是300dpi,那就放到320dpi对应的xdpi目录中）
&lt;code class=&quot;highlighter-rouge&quot;&gt;dpi = Math.sqrt( widthInPixel * widthInPixel + heightInPixel * heightInPixel) / inch&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面表格为&lt;strong&gt;5.0英寸的设计稿&lt;/strong&gt;匹配的&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;目录&lt;/th&gt;
          &lt;th&gt;倍数&lt;/th&gt;
          &lt;th&gt;dpi&lt;/th&gt;
          &lt;th&gt;分辨率&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;ldpi&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;~  120dpi&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;mdpi&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;1x&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;~ 160dpi&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;320 * 480&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;hdpi&lt;/td&gt;
          &lt;td&gt;1.5x&lt;/td&gt;
          &lt;td&gt;~ 240dpi&lt;/td&gt;
          &lt;td&gt;480 * 800&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;xdpi&lt;/td&gt;
          &lt;td&gt;2x&lt;/td&gt;
          &lt;td&gt;~ 320dpi&lt;/td&gt;
          &lt;td&gt;720 * 1280&lt;/td&gt;
          &lt;td&gt;主流设计尺寸&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;xxdpi&lt;/td&gt;
          &lt;td&gt;3x&lt;/td&gt;
          &lt;td&gt;~ 480dpi&lt;/td&gt;
          &lt;td&gt;1080 * 1920&lt;/td&gt;
          &lt;td&gt;主流设计尺寸&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;xxxdpi&lt;/td&gt;
          &lt;td&gt;4x&lt;/td&gt;
          &lt;td&gt;~ 640dpi&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;nodpi&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
          &lt;td&gt;不缩放图片&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;android-屏幕适配方案&quot;&gt;Android 屏幕适配方案&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Google官方推荐方案，先看看在Android中&lt;code class=&quot;highlighter-rouge&quot;&gt;DP&lt;/code&gt;这个单位的魔法：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// 源码位于：TypedValue#applyDimension
/**
 * Converts an unpacked complex data value holding a dimension to its final floating
 * point value. The two parameters &amp;lt;var&amp;gt;unit&amp;lt;/var&amp;gt; and &amp;lt;var&amp;gt;value&amp;lt;/var&amp;gt;
 * are as in {@link #TYPE_DIMENSION}.
 *
 * @param unit    The unit to convert from.
 * @param value   The value to apply the unit to.
 * @param metrics Current display metrics to use in the conversion --
 *                supplies display density and scaling information.
 * @return The complex floating point value multiplied by the appropriate
 * metrics depending on its unit.
 */
public static float applyDimension(int unit, float value, DisplayMetrics metrics) {
    switch (unit) {
        case COMPLEX_UNIT_PX:
            return value;
        case COMPLEX_UNIT_DIP:
            return value * metrics.density;
        case COMPLEX_UNIT_SP:
            return value * metrics.scaledDensity;
        case COMPLEX_UNIT_PT:
            return value * metrics.xdpi * (1.0f / 72);
        case COMPLEX_UNIT_IN:
            return value * metrics.xdpi;
        case COMPLEX_UNIT_MM:
            return value * metrics.xdpi * (1.0f / 25.4f);
    }
    return 0;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;这里&lt;code class=&quot;highlighter-rouge&quot;&gt;applyDimension&lt;/code&gt;传入的是DP，返回的是Px，因为在Android中所有的绘制都是用Px作为单位的，DP就是在这里被转化为DP的，转换的方式也一目了然。&lt;/p&gt;

    &lt;p&gt;Google推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;wrap_content&quot;&lt;/code&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;match_parent&quot;&lt;/code&gt;等&lt;strong&gt;相对尺寸&lt;/strong&gt;来布局，这样无论在什么屏幕，以及横屏竖屏情况下，都有一个良好的体验。Google新出的&lt;code class=&quot;highlighter-rouge&quot;&gt;ConstraintLayout&lt;/code&gt;也是这样的设计。&lt;/p&gt;

    &lt;p&gt;为适配不同大小的屏幕，Google还有&lt;a href=&quot;https://developer.android.com/training/multiscreen/screensizes#TaskUseSWQuali&quot;&gt;SmallestWidth适配&lt;/a&gt;, 中文也有较详细的介绍&lt;a href=&quot;https://www.jianshu.com/p/a4b8e4c5d9b0&quot;&gt;@拉丁吴&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA&quot;&gt;今日头条提出了个方案&lt;/a&gt;,通过修改&lt;code class=&quot;highlighter-rouge&quot;&gt;Resources#getDisplayMetrics#density&lt;/code&gt;来适配屏幕，利用了上述源码中dp -&amp;gt; px的转换，更改density值，来达到自己控制屏幕适配。看起来很美好，但这种方案其实是和Google的设计相违背的，比如&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;Google 方案&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;今日头条方案 &lt;a href=&quot;https://github.com/JessYanCoding/AndroidAutoSize&quot;&gt;Github&lt;/a&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://developer.android.com/images/training/layout-hvga.png&quot; alt=&quot;&quot; width=&quot;300px&quot; /&gt;&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/img/posts/ScreenAdapt_jrtt_layout.jpg&quot; alt=&quot;&quot; width=&quot;300px&quot; /&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;看出问题来了吧，虽然可以通过其他方式解决问题，但是这始终非官方推荐的设计方式。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;今日头条只提出了方案，并没有开源，所以就有大佬依据头条的方案写了开源库&lt;a href=&quot;https://github.com/JessYanCoding/AndroidAutoSize&quot;&gt;AndroidAutoSize&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;头条的方案仍然存在缺陷，就是更改了&lt;code class=&quot;highlighter-rouge&quot;&gt;Resources#getDisplayMetrics#density&lt;/code&gt;值并不能一劳永逸，系统会时不时地将&lt;code class=&quot;highlighter-rouge&quot;&gt;density&lt;/code&gt;值复原，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;activity&lt;/code&gt;从后台恢复到前台时……。于是，又有大佬站出来了，并在其开源库&lt;a href=&quot;https://github.com/Blankj/AndroidUtilCode/issues/758&quot;&gt;AndroidUtilCode&lt;/a&gt;中实现了，相比于 AndroidAutoSize，主要有2点进步：&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;PT&lt;/code&gt;而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;DP&lt;/code&gt;,完美兼容了老项目。&lt;/li&gt;
      &lt;li&gt;将更改&lt;code class=&quot;highlighter-rouge&quot;&gt;DisplayMetrics&lt;/code&gt;的时机设在&lt;code class=&quot;highlighter-rouge&quot;&gt;getResource()&lt;/code&gt;，因为基本上所有的调用&lt;code class=&quot;highlighter-rouge&quot;&gt;DisplayMetrics&lt;/code&gt;的地方都是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;getResource().getDisplayMetrics&lt;/code&gt;调用的，重写了&lt;code class=&quot;highlighter-rouge&quot;&gt;getResource()&lt;/code&gt;方法并在其中更改&lt;code class=&quot;highlighter-rouge&quot;&gt;DisplayMetrics&lt;/code&gt;中的值，保证了每次调用&lt;code class=&quot;highlighter-rouge&quot;&gt;metrics&lt;/code&gt;之前，都已经更改了里面的值。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;参考资料&quot;&gt;参考资料&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/19565895&quot;&gt;[无线手册-4] dp、sp、px傻傻分不清楚[完整]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/aaa9fafdbc20&quot;&gt;十分钟快速理解DPI和PPI，不再傻傻分不清！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA&quot;&gt;一种极低成本的Android屏幕适配方式@今日头条&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JessYanCoding/AndroidAutoSize&quot;&gt;今日头条屏幕适配方案终极版，一个极低成本的 Android 屏幕适配方案.@JessYanCoding&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blankj.com/2018/12/18/android-adapt-screen-killer/&quot;&gt;Android 屏幕适配终结者@Blankj&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/ScreenAdapt/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/ScreenAdapt/</guid>
        
        <category>Android</category>
        
        <category>UI</category>
        
        
      </item>
    
      <item>
        <title>Rxjava 捡漏</title>
        <description>&lt;h3 id=&quot;操作符&quot;&gt;操作符&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Interval&lt;/strong&gt;: 按固定时间间隔发射整数序列，相当于定时器&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;range&lt;/strong&gt;: 发射指定范围的整数序列 比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Observable.range(10,2) 结果 10，11&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;concatMap&lt;/strong&gt;: 在 map 基础上保持数据的顺序&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;buffer&lt;/strong&gt;: 将指定个数的数据包装成数据列表一次性发射&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;groupBy&lt;/strong&gt;: 将数据分组排序后依次发射&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;distinct&lt;/strong&gt;: 去重，只允许没有发射过的数据通过&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;throttleFirst&lt;/strong&gt;: 在指定时间窗口里，只允许第一条数据通过&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;merge/concat&lt;/strong&gt;: 就像多车道汇合一样，只是 merge 不保证顺序，concat 保证顺序&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;zip&lt;/strong&gt;: 就像拉链一样，2个 Observable 的元素依次结合，返回新的元素。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Do&lt;/strong&gt;:
    &lt;ol&gt;
      &lt;li&gt;doOnEach&lt;/li&gt;
      &lt;li&gt;doOnNext&lt;/li&gt;
      &lt;li&gt;doOnSubscribe&lt;/li&gt;
      &lt;li&gt;doOnUnsubscribe&lt;/li&gt;
      &lt;li&gt;doOnCompleted&lt;/li&gt;
      &lt;li&gt;doOnError&lt;/li&gt;
      &lt;li&gt;doOnTerminate: 当 Observable 终止（无论是正常还是异常终止）&lt;strong&gt;&lt;em&gt;之前&lt;/em&gt;&lt;/strong&gt;会被调用&lt;/li&gt;
      &lt;li&gt;finallyDo: 当 Observable 终止（无论是正常还是异常终止）&lt;strong&gt;&lt;em&gt;之后&lt;/em&gt;&lt;/strong&gt;会被调用&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;timeout&lt;/strong&gt;: 超时后 onError 或使用备用的 Observable&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;catch&lt;/strong&gt;: onErrorReturn…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;retry/retryWhen&lt;/strong&gt;: 遇到 Error 重试&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;条件判断&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;all: 对所有数据进行判断，全部满足返回 true, 否则 false&lt;/li&gt;
      &lt;li&gt;contains: 类似于 &lt;code class=&quot;highlighter-rouge&quot;&gt;list.contains()&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;toMap&lt;/strong&gt;: 类似于 toList&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;线程&quot;&gt;线程&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;IO&lt;/strong&gt;: 内部实现为 无数量上限的线程池，可重用线程&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/03/05/Rxjava/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/03/05/Rxjava/</guid>
        
        <category>Android</category>
        
        <category>Java</category>
        
        <category>RxJava</category>
        
        
      </item>
    
  </channel>
</rss>
