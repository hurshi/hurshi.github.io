I"+<h3 id="概念理理清">概念理理清:</h3>

<ul>
  <li>
    <p><strong>px</strong></p>

    <ul>
      <li>全称：pixel / 像素</li>
    </ul>
  </li>
  <li>
    <p><strong>dot</strong></p>

    <ul>
      <li>全称：墨点（物理点）</li>
    </ul>
  </li>
  <li>
    <p><strong>ppi</strong></p>

    <ul>
      <li>全称：pixle per inch （图像分辨率）</li>
      <li>解释：每英寸包含像素(px)的个数</li>
    </ul>
  </li>
  <li>
    <p><strong>dpi</strong></p>

    <ul>
      <li>全称：dots per inch（打印分辨率）</li>
      <li>解释：每英寸包含物理点(dot)的个数</li>
    </ul>
  </li>
  <li>
    <p><strong>dppx</strong></p>

    <ul>
      <li>全称：dot per pixel</li>
      <li>解释：每像素包含的像素(px)个数</li>
    </ul>
  </li>
  <li>
    <p><strong>density independence</strong></p>

    <ul>
      <li>全称：独立密度</li>
      <li>解释：这是Android中定义的一个值，计算方式为：屏幕像素宽度(px)/最小宽度(dp)，其中“最小宽度”可以在手机的开发者选项中设置。</li>
    </ul>
  </li>
  <li>
    <p><strong>dp</strong></p>

    <ul>
      <li>
        <p>全称：density-independent pixel (设备独立像素)</p>
      </li>
      <li>
        <p>解释：在Android中使用的单位，计算方式为：px = dp * density_indenpendence；</p>

        <p>由此可见,其实dp类似于分辨率(ppi)，都是描述每个单位中包含多少个像素的，只不过ppi是固定的，而dp依据设备动态变化的。</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="混淆区分开">混淆区分开</h3>

<ul>
  <li>DPI - PPI 都是啥鬼
    <ol>
      <li>DPI面向的是印刷受体，PPI面向的是荧屏</li>
      <li>这篇文章讲的非常好，强烈推荐：<a href="https://hurshi.github.io/2019/08/09/android_dpi_ppi/">十分钟快速理解DPI和PPI，不再傻傻分不清！</a></li>
      <li>在Android中，不必过多计较DPI/PPI,毕竟官网也没有描述清楚，如下所示，既然是<code class="highlighter-rouge">pixels per inch</code>那不应该是PPI么？
        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>  <span class="cm">/**
    * The exact physical pixels per inch of the screen in the X dimension.
    */</span>
  <span class="kd">public</span> <span class="kt">float</span> <span class="n">xdpi</span><span class="o">;</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<h3 id="图片放哪个目录">图片放哪个目录？</h3>

<ul>
  <li>
    <p>Android官方<strong>并没有说</strong> “320 * 480分辨率的图片要放到mdpi中”这样的话，而是说 “160dpi 的图片要放到mdpi的文件夹中”，见<a href="https://developer.android.com/training/multiscreen/screendensities">官网文档</a>。</p>
  </li>
  <li>
    <p>但是视觉一般只提供分辨率，不提供给我门dpi,我要怎么放呢？那就需要视觉提供视觉稿的英寸数值inch，然后自己计算dpi，具体计算方法如下，计算结果往上匹配（比如算出来是300dpi,那就放到320dpi对应的xdpi目录中）
<code class="highlighter-rouge">dpi = Math.sqrt( widthInPixel * widthInPixel + heightInPixel * heightInPixel) / inch</code></p>
  </li>
  <li>
    <p>下面表格为<strong>5.0英寸的设计稿</strong>匹配的</p>

    <table>
      <thead>
        <tr>
          <th>目录</th>
          <th>倍数</th>
          <th>dpi</th>
          <th>分辨率</th>
          <th>描述</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>ldpi</td>
          <td> </td>
          <td>~  120dpi</td>
          <td> </td>
          <td> </td>
        </tr>
        <tr>
          <td><strong>mdpi</strong></td>
          <td><strong>1x</strong></td>
          <td><strong>~ 160dpi</strong></td>
          <td><strong>320 * 480</strong></td>
          <td> </td>
        </tr>
        <tr>
          <td>hdpi</td>
          <td>1.5x</td>
          <td>~ 240dpi</td>
          <td>480 * 800</td>
          <td> </td>
        </tr>
        <tr>
          <td>xdpi</td>
          <td>2x</td>
          <td>~ 320dpi</td>
          <td>720 * 1280</td>
          <td>主流设计尺寸</td>
        </tr>
        <tr>
          <td>xxdpi</td>
          <td>3x</td>
          <td>~ 480dpi</td>
          <td>1080 * 1920</td>
          <td>主流设计尺寸</td>
        </tr>
        <tr>
          <td>xxxdpi</td>
          <td>4x</td>
          <td>~ 640dpi</td>
          <td> </td>
          <td> </td>
        </tr>
        <tr>
          <td>nodpi</td>
          <td> </td>
          <td> </td>
          <td> </td>
          <td>不缩放图片</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h3 id="android-屏幕适配方案">Android 屏幕适配方案</h3>

<ol>
  <li>
    <p>Google官方推荐方案，先看看在Android中<code class="highlighter-rouge">DP</code>这个单位的魔法：</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
</pre></td><td class="rouge-code"><pre>// 源码位于：TypedValue#applyDimension
/**
 * Converts an unpacked complex data value holding a dimension to its final floating
 * point value. The two parameters &lt;var&gt;unit&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt;
 * are as in {@link #TYPE_DIMENSION}.
 *
 * @param unit    The unit to convert from.
 * @param value   The value to apply the unit to.
 * @param metrics Current display metrics to use in the conversion --
 *                supplies display density and scaling information.
 * @return The complex floating point value multiplied by the appropriate
 * metrics depending on its unit.
 */
public static float applyDimension(int unit, float value, DisplayMetrics metrics) {
    switch (unit) {
        case COMPLEX_UNIT_PX:
            return value;
        case COMPLEX_UNIT_DIP:
            return value * metrics.density;
        case COMPLEX_UNIT_SP:
            return value * metrics.scaledDensity;
        case COMPLEX_UNIT_PT:
            return value * metrics.xdpi * (1.0f / 72);
        case COMPLEX_UNIT_IN:
            return value * metrics.xdpi;
        case COMPLEX_UNIT_MM:
            return value * metrics.xdpi * (1.0f / 25.4f);
    }
    return 0;
}
</pre></td></tr></tbody></table></code></pre></div>    </div>
    <p>这里<code class="highlighter-rouge">applyDimension</code>传入的是DP，返回的是Px，因为在Android中所有的绘制都是用Px作为单位的，DP就是在这里被转化为DP的，转换的方式也一目了然。</p>

    <p>Google推荐使用<code class="highlighter-rouge">"wrap_content"</code> 和<code class="highlighter-rouge">"match_parent"</code>等<strong>相对尺寸</strong>来布局，这样无论在什么屏幕，以及横屏竖屏情况下，都有一个良好的体验。Google新出的<code class="highlighter-rouge">ConstraintLayout</code>也是这样的设计。</p>

    <p>为适配不同大小的屏幕，Google还有<a href="https://developer.android.com/training/multiscreen/screensizes#TaskUseSWQuali">SmallestWidth适配</a>, 中文也有较详细的介绍<a href="https://www.jianshu.com/p/a4b8e4c5d9b0">@拉丁吴</a></p>
  </li>
  <li>
    <p><a href="https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA">今日头条提出了个方案</a>,通过修改<code class="highlighter-rouge">Resources#getDisplayMetrics#density</code>来适配屏幕，利用了上述源码中dp -&gt; px的转换，更改density值，来达到自己控制屏幕适配。看起来很美好，但这种方案其实是和Google的设计相违背的，比如</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: center">Google 方案</th>
          <th style="text-align: center">今日头条方案 <a href="https://github.com/JessYanCoding/AndroidAutoSize">Github</a></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: center"><img src="https://developer.android.com/images/training/layout-hvga.png" alt="" width="300px" /></td>
          <td style="text-align: center"><img src="/img/posts/ScreenAdapt_jrtt_layout.jpg" alt="" width="300px" /></td>
        </tr>
      </tbody>
    </table>

    <p>看出问题来了吧，虽然可以通过其他方式解决问题，但是这始终非官方推荐的设计方式。</p>
  </li>
  <li>
    <p>今日头条只提出了方案，并没有开源，所以就有大佬依据头条的方案写了开源库<a href="https://github.com/JessYanCoding/AndroidAutoSize">AndroidAutoSize</a></p>
  </li>
  <li>
    <p>头条的方案仍然存在缺陷，就是更改了<code class="highlighter-rouge">Resources#getDisplayMetrics#density</code>值并不能一劳永逸，系统会时不时地将<code class="highlighter-rouge">density</code>值复原，比如<code class="highlighter-rouge">activity</code>从后台恢复到前台时……。于是，又有大佬站出来了，并在其开源库<a href="https://github.com/Blankj/AndroidUtilCode/issues/758">AndroidUtilCode</a>中实现了，相比于 AndroidAutoSize，主要有2点进步：</p>

    <ol>
      <li>使用<code class="highlighter-rouge">PT</code>而不是<code class="highlighter-rouge">DP</code>,完美兼容了老项目。</li>
      <li>将更改<code class="highlighter-rouge">DisplayMetrics</code>的时机设在<code class="highlighter-rouge">getResource()</code>，因为基本上所有的调用<code class="highlighter-rouge">DisplayMetrics</code>的地方都是通过<code class="highlighter-rouge">getResource().getDisplayMetrics</code>调用的，重写了<code class="highlighter-rouge">getResource()</code>方法并在其中更改<code class="highlighter-rouge">DisplayMetrics</code>中的值，保证了每次调用<code class="highlighter-rouge">metrics</code>之前，都已经更改了里面的值。</li>
    </ol>
  </li>
</ol>

<h5 id="参考资料">参考资料</h5>

<ol>
  <li><a href="https://zhuanlan.zhihu.com/p/19565895">[无线手册-4] dp、sp、px傻傻分不清楚[完整]</a></li>
  <li><a href="https://www.jianshu.com/p/aaa9fafdbc20">十分钟快速理解DPI和PPI，不再傻傻分不清！</a></li>
  <li><a href="https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA">一种极低成本的Android屏幕适配方式@今日头条</a></li>
  <li><a href="https://github.com/JessYanCoding/AndroidAutoSize">今日头条屏幕适配方案终极版，一个极低成本的 Android 屏幕适配方案.@JessYanCoding</a></li>
  <li><a href="https://blankj.com/2018/12/18/android-adapt-screen-killer/">Android 屏幕适配终结者@Blankj</a></li>
</ol>
:ET