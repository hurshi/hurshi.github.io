I"
 <h3 id="非对称加密">非对称加密</h3>

<ol>
  <li>公钥是公开的。私钥是私有的。公钥加密只能用私钥解密，私钥加密只能用公钥解密。</li>
  <li>其他人使用我的公钥加密，自己用私钥解密，这叫“加密”。</li>
  <li>自己用私钥加密，其他人使用我的公钥解密，这叫“签名”。</li>
  <li>在 3 的基础上，如果这对非对称密钥是由权威的“证书中心”颁发的，就叫“数字证书”。</li>
</ol>

<h3 id="数字证书">数字证书</h3>

<ol>
  <li>证书机构对该证书的数字签名（Signature Algorithm）</li>
  <li>有效时间（Validity）</li>
  <li>证书持有人 的信息（包含网址域名）</li>
  <li>公钥（Public Key）</li>
  <li>其他</li>
</ol>

<h3 id="为什么说-https-是安全可靠的">为什么说 HTTPS 是安全可靠的？</h3>

<ol>
  <li>
    <p>https 通信机制</p>

    <div class="mermaid">
sequenceDiagram
    client-&gt;&gt;server: hello
    Note right of client: 支持的协议版本<br />随机数 A<br />加密组件
    server-&gt;&gt;client: hello
    Note right of client: 支持的协议版本<br />随机数 B<br />加密组件<br />服务器证书
    Note over client: 验证证书：<br />是否是可信机构颁布<br />域名是否一致<br />证书是否过期等等
    client-&gt;&gt;server: 
    Note right of client: 公钥加密的随机数C<br />确定加密方式<br />hash
    Note over client,server: 客户端/服务端:<br />各自使用3个随机数<br />以及协商好的加密<br />方式生成会话密钥
    server-&gt;&gt;client: 
    Note right of client: 确定加密方式<br />hash
    Note over client,server: 客户端/服务端:<br />使用普通的HTTP协议进行通信行<br />使用对称加密，密钥为“会话密钥”
</div>
  </li>
  <li>
    <p>中间人攻击：窃听数据</p>

    <blockquote>
      <p>因为 随机数3 是使用服务器的公钥加密的，所以中间人得不到 随机数3 的值，因而不知道密钥，中间人窃听失败。</p>
    </blockquote>
  </li>
  <li>
    <p>中间人攻击：代理( 欺上瞒下 )</p>

    <blockquote>
      <p>中间人代理的方式，如果有中间人代理了你的服务器，但它其实并没有服务器的数字证书，所以它的证书在客户端这边是校验不通过的：要不就是合法性校验不过(非权威机构颁布)，要不就是证书中的域名校验不过。(它不可能从权威机构那里拿到你的域名的数字证书)</p>
    </blockquote>
  </li>
  <li>
    <p>总结下：HTTPS 能保证服务器到客户端之间数据的安全性，可靠性。你不用担心你的数据被窃听或者被中间人改过了。</p>
  </li>
</ol>

<h3 id="https-双向认证">HTTPS 双向认证</h3>

<ol>
  <li>
    <p>以上的 HTTPS 只是单向的验证。仔细想想，只有客户端验证了数据的合法性，而服务端并没有验证客户端数据的合法性，造成了当“客户端沦陷”的时候，服务端完全不知情的状况。</p>
  </li>
  <li>
    <p>Https 双向认证的基本原理和上文所讲的单向认证差不多，区别在于：客户端也有数字证书，在建立 https 连接的时候，客户端会把自己的证书以及公钥发给服务器。这样就能保证客户端发给服务端的消息不会被中间人篡改。</p>
  </li>
</ol>

<h3 id="https-真的就安全了么">HTTPS 真的就安全了么？</h3>

<ol>
  <li>从普通用户角度来说，HTTPS 的确已经够了。</li>
  <li>但对于企业来说，除了服务普通用户之外，还得提防黑客的攻击，HTTPS 能保障你的安全么？显然不会：
    <ol>
      <li>黑客客户端可以安装信任自定义证书，那么你和客户端之间就不是直接连接，而是被“代理”了，而在代理服务器上，你的所有数据都是透明的。Fiddler, Charles, whistle 都是这么实现的。</li>
      <li>某些浏览器支持将 TLS 会话中使用的对称密钥保存在外部文件中，这相当于密钥泄露了。所以黑客完全可以通过这个密钥来解密窃听来的数据。Wireshark 就是这么搞的。可以看看：<a href="https://imququ.com/post/how-to-decrypt-https.html">三种解密 HTTPS 流量的方法介绍</a></li>
      <li>对于双向认证来说，客户端的“私钥”就安全么？怎么保证不会落入黑客之手？</li>
    </ol>
  </li>
</ol>

<h3 id="解决方案">解决方案</h3>

<ol>
  <li>
    <p>证书锁定：在客户端判断证书是否是预设的证书，若不是的话就不信任。</p>

    <ol>
      <li>
        <p>在OkHttp 中可以设置：</p>

        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="kd">val</span> <span class="py">hostName</span> <span class="p">=</span> <span class="s">"www.baidu.com"</span>
<span class="kd">val</span> <span class="py">pin1</span> <span class="p">=</span> <span class="s">"sha256/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="</span>
<span class="kd">val</span> <span class="py">pin2</span> <span class="p">=</span> <span class="s">"sha256/BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB="</span>
<span class="kd">val</span> <span class="py">certificatePinner</span> <span class="p">=</span> <span class="nc">CertificatePinner</span><span class="p">.</span><span class="nc">Builder</span><span class="p">().</span><span class="nf">add</span><span class="p">(</span><span class="n">hostName</span><span class="p">,</span> <span class="n">pin1</span><span class="p">,</span> <span class="n">pin2</span><span class="p">).</span><span class="nf">build</span><span class="p">();</span>
      
<span class="kd">val</span> <span class="py">okHttpClient</span> <span class="p">=</span> <span class="nc">OkHttpClient</span><span class="p">.</span><span class="nc">Builder</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">certificatePinner</span><span class="p">(</span><span class="n">certificatePinner</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">build</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div>        </div>

        <p>这样，就在客户端锁定了服务端的证书 sha256 值必须得是 <code class="highlighter-rouge">sha256/AAAA.....</code>才行，其他的证书都不行。以此防止客户端被黑客调试。</p>
      </li>
      <li>
        <p>设置证书锁定后，客户端首先还是会和常规 https 一样在系统根证书中去确认本连接的证书的合法性，校验通过后，再去比对 CertificatePinner 中对应域名的 pin 值是否匹配。匹配后才会放行。</p>
      </li>
      <li>
        <p>弊端：证书锁定限制了服务器更新证书的能力，就像客户端用 IP 地址类似。</p>
      </li>
    </ol>
  </li>
  <li>
    <p>白盒加密：在客户端使用白盒加密对称加密密钥，然后和服务端之间采用对称加密的 http 传输。（如何防止黑客从内存中获取解密后的密钥呢？）</p>
  </li>
</ol>

<h3 id="现在安全了么">现在安全了么？</h3>

<p>道高一尺魔高一丈，黑客如果还要“搞你”，还是有其他方法的，以上方法并没有高枕无忧。</p>

<ol>
  <li>Frida hook 方案。（需要手机 Root，但对于黑客来说谁没有一只 Root 的手机呢？）</li>
  <li>各种逆向，重打包方案。</li>
</ol>

<h3 id="参考">参考</h3>

<ul>
  <li><a href="https://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a></li>
  <li><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">数字签名是什么？</a></li>
  <li><a href="https://juejin.im/post/5c9cbf1df265da60f6731f0a">扯一扯HTTPS单向认证、双向认证、抓包原理、反抓包策略</a></li>
  <li><a href="https://www.jianshu.com/p/19f311d81b6d">证书固定、CertificatePinner与Charles抓包的问题</a></li>
</ul>

:ET